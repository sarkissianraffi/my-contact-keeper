{"ast":null,"code":"var _jsxFileName = \"/Users/Raffi/Desktop/my-contact-keeper/client/src/context/contact/ContactState.js\";\nimport React, { useReducer } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactContext from './ContactContext';\nimport ContactReducer from './ContactReducer';\nimport axios from 'axios';\nimport { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER } from '../types'; // Set the initial States\n\nconst ContactState = props => {\n  const initialState = {\n    // Hard coded contact as far as we don't get it from our API\n    contacts: [],\n    current: null,\n    filtered: null\n  }; // Pull out the state and dispatch to our reducer\n\n  const [state, dispatch] = useReducer(ContactReducer, initialState); // Add Contact\n\n  const addContact = contact => {\n    //Get a random ID\n    contact.id = uuidv4(); //Dispatch the function to the reducer with the contact payload\n\n    dispatch({\n      type: ADD_CONTACT,\n      payload: contact\n    });\n  }; // Delete Contact\n\n\n  const deleteContact = id => {\n    dispatch({\n      type: DELETE_CONTACT,\n      payload: id\n    });\n  }; // Set Current Contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; // Clear Current Contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; // Update Contact\n\n\n  const updateContact = contact => {\n    dispatch({\n      type: UPDATE_CONTACT,\n      payload: contact\n    });\n  }; // Filter Contacts\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; // Clear Filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      addContact,\n      deleteContact,\n      setCurrent,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["/Users/Raffi/Desktop/my-contact-keeper/client/src/context/contact/ContactState.js"],"names":["React","useReducer","v4","uuidv4","ContactContext","ContactReducer","axios","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","ContactState","props","initialState","contacts","current","filtered","state","dispatch","addContact","contact","id","type","payload","deleteContact","setCurrent","clearCurrent","updateContact","filterContacts","text","clearFilter","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,WADF,EAEEC,cAFF,EAGEC,WAHF,EAIEC,aAJF,EAKEC,cALF,EAMEC,eANF,EAOEC,YAPF,QAQO,UARP,C,CAUA;;AACA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAMC,YAAY,GAAG;AACnB;AACAC,IAAAA,QAAQ,EAAE,EAFS;AAGnBC,IAAAA,OAAO,EAAE,IAHU;AAInBC,IAAAA,QAAQ,EAAE;AAJS,GAArB,CAD8B,CAQ9B;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBpB,UAAU,CAACI,cAAD,EAAiBW,YAAjB,CAApC,CAT8B,CAW9B;;AACA,QAAMM,UAAU,GAAIC,OAAD,IAAa;AAC9B;AACAA,IAAAA,OAAO,CAACC,EAAR,GAAarB,MAAM,EAAnB,CAF8B,CAG9B;;AACAkB,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAElB,WAAR;AAAqBmB,MAAAA,OAAO,EAAEH;AAA9B,KAAD,CAAR;AACD,GALD,CAZ8B,CAmB9B;;;AACA,QAAMI,aAAa,GAAIH,EAAD,IAAQ;AAC5BH,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,MAAAA,OAAO,EAAEF;AAAjC,KAAD,CAAR;AACD,GAFD,CApB8B,CAwB9B;;;AACA,QAAMI,UAAU,GAAIL,OAAD,IAAa;AAC9BF,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEhB,WAAR;AAAqBiB,MAAAA,OAAO,EAAEH;AAA9B,KAAD,CAAR;AACD,GAFD,CAzB8B,CA6B9B;;;AACA,QAAMM,YAAY,GAAG,MAAM;AACzBR,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEf;AAAR,KAAD,CAAR;AACD,GAFD,CA9B8B,CAkC9B;;;AACA,QAAMoB,aAAa,GAAIP,OAAD,IAAa;AACjCF,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEd,cAAR;AAAwBe,MAAAA,OAAO,EAAEH;AAAjC,KAAD,CAAR;AACD,GAFD,CAnC8B,CAuC9B;;;AACA,QAAMQ,cAAc,GAAIC,IAAD,IAAU;AAC/BX,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEb,eAAR;AAAyBc,MAAAA,OAAO,EAAEM;AAAlC,KAAD,CAAR;AACD,GAFD,CAxC8B,CA4C9B;;;AACA,QAAMC,WAAW,GAAG,MAAM;AACxBZ,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEZ;AAAR,KAAD,CAAR;AACD,GAFD;;AAIA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AACLI,MAAAA,QAAQ,EAAEG,KAAK,CAACH,QADX;AAELC,MAAAA,OAAO,EAAEE,KAAK,CAACF,OAFV;AAGLC,MAAAA,QAAQ,EAAEC,KAAK,CAACD,QAHX;AAILG,MAAAA,UAJK;AAKLK,MAAAA,aALK;AAMLC,MAAAA,UANK;AAOLC,MAAAA,YAPK;AAQLC,MAAAA,aARK;AASLC,MAAAA,cATK;AAULE,MAAAA;AAVK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcGlB,KAAK,CAACmB,QAdT,CADF;AAkBD,CAnED;;AAqEA,eAAepB,YAAf","sourcesContent":["import React, { useReducer } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactContext from './ContactContext';\nimport ContactReducer from './ContactReducer';\nimport axios from 'axios';\nimport {\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n} from '../types';\n\n// Set the initial States\nconst ContactState = (props) => {\n  const initialState = {\n    // Hard coded contact as far as we don't get it from our API\n    contacts: [],\n    current: null,\n    filtered: null,\n  };\n\n  // Pull out the state and dispatch to our reducer\n  const [state, dispatch] = useReducer(ContactReducer, initialState);\n\n  // Add Contact\n  const addContact = (contact) => {\n    //Get a random ID\n    contact.id = uuidv4();\n    //Dispatch the function to the reducer with the contact payload\n    dispatch({ type: ADD_CONTACT, payload: contact });\n  };\n\n  // Delete Contact\n  const deleteContact = (id) => {\n    dispatch({ type: DELETE_CONTACT, payload: id });\n  };\n\n  // Set Current Contact\n  const setCurrent = (contact) => {\n    dispatch({ type: SET_CURRENT, payload: contact });\n  };\n\n  // Clear Current Contact\n  const clearCurrent = () => {\n    dispatch({ type: CLEAR_CURRENT });\n  };\n\n  // Update Contact\n  const updateContact = (contact) => {\n    dispatch({ type: UPDATE_CONTACT, payload: contact });\n  };\n\n  // Filter Contacts\n  const filterContacts = (text) => {\n    dispatch({ type: FILTER_CONTACTS, payload: text });\n  };\n\n  // Clear Filter\n  const clearFilter = () => {\n    dispatch({ type: CLEAR_FILTER });\n  };\n\n  return (\n    <ContactContext.Provider\n      value={{\n        contacts: state.contacts,\n        current: state.current,\n        filtered: state.filtered,\n        addContact,\n        deleteContact,\n        setCurrent,\n        clearCurrent,\n        updateContact,\n        filterContacts,\n        clearFilter,\n      }}\n    >\n      {props.children}\n    </ContactContext.Provider>\n  );\n};\n\nexport default ContactState;\n"]},"metadata":{},"sourceType":"module"}