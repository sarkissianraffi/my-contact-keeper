{"ast":null,"code":"var _jsxFileName = \"/Users/Raffi/Desktop/my-contact-keeper/client/src/context/contact/ContactState.js\";\nimport React, { useReducer } from 'react';\nimport ContactContext from './ContactContext';\nimport ContactReducer from './ContactReducer';\nimport axios from 'axios';\nimport { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR } from '../types'; // Set the initial States\n\nconst ContactState = props => {\n  const initialState = {\n    // Hard coded contact as far as we don't get it from our API\n    contacts: [],\n    current: null,\n    filtered: null,\n    error: null\n  }; // Pull out the state and dispatch to our reducer\n\n  const [state, dispatch] = useReducer(ContactReducer, initialState); // Add Contact\n\n  const addContact = async contact => {\n    //Create headers\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/contacts', contact, config); //Dispatch the function to the reducer with the contact payload\n\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (error) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: error.response.msg\n      });\n    }\n  }; // Delete Contact\n\n\n  const deleteContact = id => {\n    dispatch({\n      type: DELETE_CONTACT,\n      payload: id\n    });\n  }; // Set Current Contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; // Clear Current Contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; // Update Contact\n\n\n  const updateContact = contact => {\n    dispatch({\n      type: UPDATE_CONTACT,\n      payload: contact\n    });\n  }; // Filter Contacts\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; // Clear Filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      addContact,\n      deleteContact,\n      setCurrent,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["/Users/Raffi/Desktop/my-contact-keeper/client/src/context/contact/ContactState.js"],"names":["React","useReducer","ContactContext","ContactReducer","axios","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","addContact","contact","config","headers","res","post","type","payload","data","response","msg","deleteContact","id","setCurrent","clearCurrent","updateContact","filterContacts","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport ContactContext from './ContactContext';\nimport ContactReducer from './ContactReducer';\nimport axios from 'axios';\nimport {\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR,\n} from '../types';\n\n// Set the initial States\nconst ContactState = (props) => {\n  const initialState = {\n    // Hard coded contact as far as we don't get it from our API\n    contacts: [],\n    current: null,\n    filtered: null,\n    error: null,\n  };\n\n  // Pull out the state and dispatch to our reducer\n  const [state, dispatch] = useReducer(ContactReducer, initialState);\n\n  // Add Contact\n  const addContact = async (contact) => {\n    //Create headers\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n      //Dispatch the function to the reducer with the contact payload\n      dispatch({ type: ADD_CONTACT, payload: res.data });\n    } catch (error) {\n      dispatch({ type: CONTACT_ERROR, payload: error.response.msg });\n    }\n  };\n\n  // Delete Contact\n  const deleteContact = (id) => {\n    dispatch({ type: DELETE_CONTACT, payload: id });\n  };\n\n  // Set Current Contact\n  const setCurrent = (contact) => {\n    dispatch({ type: SET_CURRENT, payload: contact });\n  };\n\n  // Clear Current Contact\n  const clearCurrent = () => {\n    dispatch({ type: CLEAR_CURRENT });\n  };\n\n  // Update Contact\n  const updateContact = (contact) => {\n    dispatch({ type: UPDATE_CONTACT, payload: contact });\n  };\n\n  // Filter Contacts\n  const filterContacts = (text) => {\n    dispatch({ type: FILTER_CONTACTS, payload: text });\n  };\n\n  // Clear Filter\n  const clearFilter = () => {\n    dispatch({ type: CLEAR_FILTER });\n  };\n\n  return (\n    <ContactContext.Provider\n      value={{\n        contacts: state.contacts,\n        current: state.current,\n        filtered: state.filtered,\n        addContact,\n        deleteContact,\n        setCurrent,\n        clearCurrent,\n        updateContact,\n        filterContacts,\n        clearFilter,\n      }}\n    >\n      {props.children}\n    </ContactContext.Provider>\n  );\n};\n\nexport default ContactState;\n"]},"metadata":{},"sourceType":"module"}